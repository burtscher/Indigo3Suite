/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include "indigo_sssp_vertex_omp.h"
//BlankLine

/*@ReadWrite@*/ declare /*@ReadModifyWrite@*/ declare
/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare
/*@NonDeterm@*/ declare /*@Determ@*/ declare

/*@+ReadModifyWrite@*/
/*@NoLivelockBug@*/ /*@LivelockBug@*/ suppress
/*@-ReadModifyWrite@*/

/*@NonDeterm@*/static void init(const int src, data_type* const dist, const int size) /*@Determ@*/static void init(const int src, data_type* const dist, data_type* const dist_n, const int size)
{
  // initialize arrays
  for (int v = 0; v < size; v++) {
    const data_type temp = (v == src) ? 0 : maxval;
    /*@NonDeterm@*/ /*@Determ@*/ dist_n[v] = temp;
    dist[v] = temp;
  }
}
//BlankLine

/*@NonDeterm@*/ static void sssp(const ECLgraph g, data_type* const dist, int* goagain) /*@Determ@*/ static void sssp(const ECLgraph g, data_type* const dist, data_type* const dist_n, int* goagain)
{
  /*@Default@*/ #pragma omp parallel for /*@Dynamic@*/ #pragma omp parallel for schedule(dynamic)
  /*@+NoBoundsBug@*/ 
  /*@NoFieldBug@*/ for (int v = 0; v < g.nodes; v ++) { /*@FieldBug@*/ for (int v = 0; v < g.edges; v ++) { 
  /*@-NoBoundsBug@*/

  /*@+BoundsBug@*/ 
  /*@NoFieldBug@*/ for (int v = 0; v <= g.nodes; v ++) { /*@FieldBug@*/ for (int v = 0; v <= g.edges; v ++) { 
  /*@-BoundsBug@*/
    const int beg = g.nindex[v];
    const int end = g.nindex[v + 1];

    // read distance from source vertex
    /*@+Determ@*/ /*@+ReadModifyWrite@*/
    /*@NoMixSyncBug@*/ const data_type s = dist[v]; /*@MixSyncBug@*/ suppress
    /*@-Determ@*/ /*@-ReadModifyWrite@*/

    /*@+NonDeterm@*/ /*@+ReadWrite@*/
    /*@RaceBug@*/ const data_type s = dist[v]; /*@Atomic@*/ const data_type s = atomicRead(&dist[v]);
    /*@NoMixSyncBug@*/ /*@MixSyncBug@*/ suppress
    /*@-NonDeterm@*/ /*@-ReadWrite@*/

    /*@+NonDeterm@*/ /*@+ReadModifyWrite@*/
    /*@NoMixSyncBug@*/ data_type s; /*@MixSyncBug@*/ const data_type s = atomicRead(&dist[v]);
    /*@NoMixSyncBug@*/ #pragma omp critical /*@MixSyncBug@*/
    /*@NoMixSyncBug@*/ s = dist[v]; /*@MixSyncBug@*/
    /*@-NonDeterm@*/ /*@-ReadModifyWrite@*/
    //BlankLine

    /*@NoRangeBug@*/ if (s != maxval) { /*@RangeBug@*/
      bool updated = false;
      /*@NoNbrBoundsBug@*/ for (int i = beg; i < end; i++) { /*@NbrBoundsBug@*/ for (int i = beg; i <= end; i++) {
        const int dst = g.nlist[i];
        const data_type new_dist = s + g.eweight[i];

        /*@+NonDeterm@*/ /*@+ReadWrite@*/
        /*@RaceBug@*/ const data_type d = dist[dst]; /*@Atomic@*/ const data_type d = atomicRead(&dist[dst]);
        /*@NoLivelockBug@*/ if (d > new_dist) { /*@LivelockBug@*/ if (d >= new_dist) { 
          /*@RaceBug@*/ dist[dst] = new_dist; /*@Atomic@*/ atomicWrite(&dist[dst], new_dist);
        /*@-NonDeterm@*/ /*@-ReadWrite@*/

        /*@+NonDeterm@*/ /*@+ReadModifyWrite@*/
        /*@RaceBug@*/ suppress /*@Atomic@*/ if (critical_min(&dist[dst], new_dist) > new_dist) {
        /*@-NonDeterm@*/ /*@-ReadModifyWrite@*/

        /*@+Determ@*/ /*@+ReadModifyWrite@*/
        /*@RaceBug@*/ suppress /*@Atomic@*/ if (critical_min(&dist_n[dst], new_dist) > new_dist) {
        /*@-Determ@*/ /*@-ReadModifyWrite@*/

          updated = true;
        }
      }
      if (updated) {
        /*@+NonDeterm@*/
        atomicWrite(goagain, 1);
        /*@-NonDeterm@*/
        /*@+Determ@*/
        /*@RaceBug@*/ suppress /*@Atomic@*/ atomicWrite(goagain, 1);
        /*@-Determ@*/
      }
    /*@NoRangeBug@*/ } /*@RangeBug@*/
  }
}
//BlankLine

static double CPUsssp_vertex(const int src, const ECLgraph g, data_type* dist)
{
  /*@NonDeterm@*/ /*@Determ@*/ data_type* dist_new = malloc(sizeof(data_type) * g.nodes);
  struct timeval start, end;
  //BlankLine

  /*@NonDeterm@*/ init(src, dist, g.nodes); /*@Determ@*/ init(src, dist, dist_new, g.nodes);
  //BlankLine

  // iterate until no more changes
  int* goagain = malloc(sizeof(int));
  int iter = 0;
  gettimeofday(&start, NULL);
  do {
    iter++;
    *goagain = 0;
    /*@NonDeterm@*/ sssp(g, dist, goagain); /*@Determ@*/ sssp(g, dist, dist_new, goagain);
    /*@NonDeterm@*/ /*@Determ@*/ SWAP(dist, dist_new);
  } while (*goagain);
  //BlankLine

  gettimeofday(&end, NULL);
  double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);
  //BlankLine

  /*@NonDeterm@*/ /*@Determ@*/ free(iter % 2 ? dist : dist_new);
  return runtime;
}
