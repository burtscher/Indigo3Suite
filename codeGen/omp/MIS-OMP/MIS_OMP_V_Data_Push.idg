/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include "indigo_mis_vertex_omp.h"
//BlankLine

/*@Atomic@*/ declare /*@RaceBug@*/ declare 
/*@NonDeterm@*/ declare /*@CopyDeterm@*/ declare /*@MergeDeterm@*/ declare 
/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

/*@+NonDeterm@*/
static void init(data_type* const priority, data_type* const status, const int size, int* const wl1, int* wlsize)
/*@-NonDeterm@*/
/*@+CopyDeterm@*/
static void init(data_type* const priority, data_type* const status, data_type* const status_n, const int size, int* const wl1, int* wlsize) 
/*@-CopyDeterm@*/
/*@+MergeDeterm@*/
static void init(data_type* const priority, data_type* const status, data_type* const status_n, const int size, int* const wl1, int* wlsize) 
/*@-MergeDeterm@*/
{
  // initialize arrays
  for (int v = 0; v < size; v++)
  {
    /*@IntType@*/ priority[v] = hash(v + 712313887); /*@LongType@*/ priority[v] = ((unsigned long)hash(v + 712313887)) | ((unsigned long)hash(v + 683067839) << (sizeof (int) * 8));
    status[v] = undecided;
    /*@NonDeterm@*/ /*@CopyDeterm@*/ status_n[v] = undecided; /*@MergeDeterm@*/ status_n[v] = undecided;
    
    //BlankLine
    // initialize worklist
    wl1[v] = v;
  }
  *wlsize = size;
}
//BlankLine

/*@+NonDeterm@*/
static void mis(const ECLgraph g, const data_type* const priority, data_type* const status, const int* const wl1, const int wl1size, int* const wl2, int* wl2size)
/*@-NonDeterm@*/
/*@+CopyDeterm@*/
static void mis(const ECLgraph g, const data_type* const priority, data_type* const status, data_type* const status_n, const int* const wl1, const int wl1size, int* const wl2, int* wl2size)
/*@-CopyDeterm@*/
/*@+MergeDeterm@*/
static void mis(const ECLgraph g, const data_type* const priority, data_type* const status, data_type* const status_n, const int* const wl1, const int wl1size, int* const wl2, int* wl2size)
/*@-MergeDeterm@*/
{
  /*@Default@*/ #pragma omp parallel for /*@Dynamic@*/ #pragma omp parallel for schedule(dynamic)
  /*@+NoBoundsBug@*/
  /*@NoFieldBug@*/ for (int w = 0; w < wl1size; w++) { /*@FieldBug@*/ for (int w = 0; w < g.nodes; w++) { 
  /*@-NoBoundsBug@*/

  /*@+BoundsBug@*/
  /*@NoFieldBug@*/ for (int w = 0; w <= wl1size; w++) { /*@FieldBug@*/ for (int w = 0; w <= g.nodes; w++) { 
  /*@-BoundsBug@*/
    // go over all nodes in WL
    int v = wl1[w];
    /*@Atomic@*/ if (atomicRead(&status[v]) == undecided) { /*@RaceBug@*/ if (status[v] == undecided) {
      int i = g.nindex[v];
      // try to find a non-excluded neighbor whose priority is higher
      /*@Atomic@*/ while ((i < g.nindex[v + 1]) && ((atomicRead(&status[g.nlist[i]]) == excluded) || (priority[v] > priority[g.nlist[i]]) || ((priority[v] == priority[g.nlist[i]]) && (v > g.nlist[i])))) { /*@RaceBug@*/ while ((i < g.nindex[v + 1]) && ((status[g.nlist[i]] == excluded) || (priority[v] > priority[g.nlist[i]]) || ((priority[v] == priority[g.nlist[i]]) && (v > g.nlist[i])))) {
        i++;
      }
      if (i < g.nindex[v + 1]) {
        // found such a neighbor -> status still unknown
        wl2[criticalAdd(wl2size, 1)] = v;
      } else {
        // no such neighbor -> all neighbors are "excluded" and v is "included"
        /*@+Atomic@*/
        /*@NonDeterm@*/ atomicWrite(&status[v], included); /*@CopyDeterm@*/ atomicWrite(&status_n[v], included); /*@MergeDeterm@*/ atomicWrite(&status_n[v], included); 
        /*@-Atomic@*/
        /*@+RaceBug@*/
        /*@NonDeterm@*/ status[v] = included; /*@CopyDeterm@*/ status_n[v] = included; /*@MergeDeterm@*/ status_n[v] = included; 
        /*@-RaceBug@*/
        
        for (int i = g.nindex[v]; i < g.nindex[v + 1]; i++) {
          /*@+Atomic@*/
          /*@NonDeterm@*/ atomicWrite(&status[g.nlist[i]], excluded); /*@CopyDeterm@*/ atomicWrite(&status_n[g.nlist[i]], excluded); /*@MergeDeterm@*/ atomicWrite(&status_n[g.nlist[i]], excluded);
          /*@-Atomic@*/
          /*@+RaceBug@*/
          /*@NonDeterm@*/ status[g.nlist[i]] = excluded; /*@CopyDeterm@*/ status_n[g.nlist[i]] = excluded; /*@MergeDeterm@*/ status_n[g.nlist[i]] = excluded;
          /*@-RaceBug@*/
        }
      }
    }
  }
}
//BlankLine

static double OMPmis_vertex(const ECLgraph g, data_type* const priority, data_type* status)
{
  /*@NonDeterm@*/ /*@CopyDeterm@*/ data_type* status_new = malloc(sizeof(data_type) * g.nodes); /*@MergeDeterm@*/ data_type* status_new =  malloc(sizeof(data_type) * g.nodes);;
  int* wl1 = malloc(sizeof(int) * g.nodes);
  int* wl2 = malloc(sizeof(int) * g.nodes);
  int* wl1size = malloc(sizeof(int));
  int* wl2size = malloc(sizeof(int));
  //BlankLine

  /*@NonDeterm@*/ init(priority, status, g.nodes, wl1, wl1size); /*@CopyDeterm@*/ init(priority, status, status_new, g.nodes, wl1, wl1size); /*@MergeDeterm@*/ init(priority, status, status_new, g.nodes, wl1, wl1size);
  
  //BlankLine
  struct timeval beg, end;
  gettimeofday(&beg, NULL);
  //BlankLine

  int iter = 0;
  do {
    iter++;
    *wl2size = 0;
    
    //BlankLine
    /*@+NonDeterm@*/
    mis(g, priority, status, wl1, *wl1size, wl2, wl2size);
    /*@-NonDeterm@*/
    /*@+CopyDeterm@*/
    mis(g, priority, status, status_new, wl1, *wl1size, wl2, wl2size);
    /*@-CopyDeterm@*/
    /*@+MergeDeterm@*/
    mis(g, priority, status, status_new, wl1, *wl1size, wl2, wl2size);
    /*@-MergeDeterm@*/
    //BlankLine
    
    /*@NonDeterm@*/ /*@CopyDeterm@*/ for (int i = 0; i < g.nodes; i++) status[i] = status_new[i]; /*@MergeDeterm@*/ updateFromWorklist(status, status_new, wl1, *wl1size);
    
    //BlankLine
    SWAP(wl1, wl2);
    *wl1size = *wl2size;
  } while (*wl1size > 0);

  //BlankLine
  gettimeofday(&end, NULL);
  const double runtime = end.tv_sec - beg.tv_sec + (end.tv_usec - beg.tv_usec) / 1000000.0;
  //BlankLine

  // determine and print set size
  int cnt = 0;
  for (int v = 0; v < g.nodes; v++) {
    if (status[v] == included) cnt++;
  }
  printf("iterations: %d,  elements in set: %d (%.1f%%)\n", iter, cnt, 100.0 * cnt / g.nodes);
  //BlankLine

  /*@NonDeterm@*/ /*@CopyDeterm@*/ free(status_new); /*@MergeDeterm@*/ free(status_new);
  free(wl1);
  free(wl2);
  free(wl1size);
  free(wl2size);
  return runtime;
}
