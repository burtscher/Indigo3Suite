/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include "indigo_bfs_vertex_omp.h"
//BlankLine
/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

static void init(const int src, data_type* const dist, const int size)
{
  // initialize arrays
  for (int v = 0; v < size; v++) {
    const data_type temp = (v == src) ? 0 : maxval;
    dist[v] = temp;
  }
}
//BlankLine

static void bfs(const int iter, ECLgraph g, data_type* const dist, int* goagain)
{
  /*@Default@*/ #pragma omp parallel for /*@Dynamic@*/ #pragma omp parallel for schedule(dynamic)
  /*@+NoBoundsBug@*/ 
  /*@NoFieldBug@*/ for (int v = 0; v < g.nodes; v++) { /*@FieldBug@*/ for (int v = 0; v < g.edges; v++) { 
  /*@-NoBoundsBug@*/

  /*@+BoundsBug@*/ 
  /*@NoFieldBug@*/ for (int v = 0; v <= g.nodes; v++) { /*@FieldBug@*/ for (int v = 0; v <= g.edges; v++) { 
  /*@-BoundsBug@*/
    const int beg = g.nindex[v];
    const int end = g.nindex[v + 1];
    /*@RaceBug@*/ data_type d = dist[v]; /*@Atomic@*/ data_type d = atomicRead(&dist[v]);
        
    /*@NoNbrBoundsBug@*/ for (int i = beg; i < end; i++) { /*@NbrBoundsBug@*/ for (int i = beg; i <= end; i++) {
      const int src = g.nlist[i];
      /*@RaceBug@*/ const data_type s = dist[src]; /*@Atomic@*/ const data_type s = atomicRead(&dist[src]);
      /*@+NoOverflowBug@*/
      /*@NonDeterm@*/ if (s != maxval) { /*@Determ@*/ if (s == iter) {
      /*@-NoOverflowBug@*/
        const data_type new_dist = s + 1;
        /*@NoLivelockBug@*/ if (new_dist < d) { /*@LivelockBug@*/ if (new_dist <= d) {
          d = new_dist;
          /*@RaceBug@*/ atomicWrite(goagain, 1); /*@Atomic@*/ atomicWrite(goagain, 1);
        }
      /*@NoOverflowBug@*/ } /*@OverflowBug@*/
    
    /*@RaceBug@*/ dist[v] = d; /*@Atomic@*/ atomicWrite(&dist[v], d);
    
    }
  }
}
//BlankLine

static double CPUbfs_vertex(const int src, ECLgraph g, data_type* dist)
{
  init(src, dist, g.nodes);
  
  //BlankLine
  struct timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine

  // iterate until no more changes
  int* goagain = malloc(sizeof(int));
  int iter = 0;
  do {
    *goagain = 0;
    bfs(iter, g, dist, goagain);
    iter++;
  } while (*goagain);
  //BlankLine

  gettimeofday(&end, NULL);
  double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);
  //BlankLine
  free(goagain);
  return runtime;
}
