/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include "indigo_cc_vertex_omp.h"
//BlankLine

/*@ReadWrite@*/ declare /*@ReadModifyWrite@*/ declare
/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

/*@+ReadModifyWrite@*/
/*@NoLivelockBug@*/ /*@LivelockBug@*/ suppress
/*@-ReadModifyWrite@*/

/*@NonDeterm@*/static void init(data_type* const label, const int size) /*@Determ@*/static void init(data_type* const label, data_type* const label_n, const int size)
{
  // initialize arrays
  for (int v = 0; v < size; v++) {
    /*@NonDeterm@*/ /*@Determ@*/ label_n[v] = v;
    label[v] = v;
  }
}
//BlankLine

/*@NonDeterm@*/ static void cc(const ECLgraph g, data_type* const label, int* goagain) /*@Determ@*/ static void cc(const ECLgraph g, data_type* const label, data_type* const label_n, int* goagain)
{
  /*@Default@*/ #pragma omp parallel for /*@Dynamic@*/ #pragma omp parallel for schedule(dynamic)

  /*@+NoBoundsBug@*/ 
  /*@NoFieldBug@*/ for (int v = 0; v < g.nodes; v ++) { /*@FieldBug@*/ for (int v = 0; v < g.edges; v ++) { 
  /*@-NoBoundsBug@*/

  /*@+BoundsBug@*/ 
  /*@NoFieldBug@*/ for (int v = 0; v <= g.nodes; v ++) { /*@FieldBug@*/ for (int v = 0; v <= g.edges; v ++) { 
  /*@-BoundsBug@*/

    /*@+NonDeterm@*/ /*@+ReadWrite@*/
    /*@RaceBug@*/ const data_type new_label = label[v]; /*@Atomic@*/ const data_type new_label = atomicRead(&label[v]);
    /*@NoMixSyncBug@*/ /*@MixSyncBug@*/ suppress
    /*@-NonDeterm@*/ /*@-ReadWrite@*/

    /*@+NonDeterm@*/ /*@+ReadModifyWrite@*/
    /*@NoMixSyncBug@*/ data_type new_label; /*@MixSyncBug@*/ const data_type new_label = atomicRead(&label[v]);
    /*@NoMixSyncBug@*/ #pragma omp critical /*@MixSyncBug@*/
    /*@NoMixSyncBug@*/ new_label = label[v]; /*@MixSyncBug@*/
    /*@-NonDeterm@*/ /*@-ReadModifyWrite@*/

    /*@+Determ@*/ /*@+ReadModifyWrite@*/
    /*@NoMixSyncBug@*/ const data_type new_label = label[v]; /*@MixSyncBug@*/ suppress
    /*@-Determ@*/ /*@-ReadModifyWrite@*/

    const int beg = g.nindex[v];
    const int end = g.nindex[v + 1];

    //BlankLine

    bool updated = false;
    /*@NoNbrBoundsBug@*/ for (int i = beg; i < end; i++) { /*@NbrBoundsBug@*/ for (int i = beg; i <= end; i++) {
      const int dst = g.nlist[i];

      /*@+NonDeterm@*/ /*@+ReadWrite@*/
      /*@RaceBug@*/ const data_type d = label[dst]; /*@Atomic@*/ const data_type d = atomicRead(&label[dst]);
      /*@NoLivelockBug@*/ if (d > new_label) { /*@LivelockBug@*/ if (d >= new_label) {
          /*@RaceBug@*/ label[dst] = new_label; /*@Atomic@*/ atomicWrite(&label[dst], new_label);
      /*@-NonDeterm@*/ /*@-ReadWrite@*/

      /*@+NonDeterm@*/ /*@+ReadModifyWrite@*/
      /*@RaceBug@*/ suppress /*@Atomic@*/ if (critical_min(&label[dst], new_label) > new_label) {
      /*@-NonDeterm@*/ /*@-ReadModifyWrite@*/

      /*@+Determ@*/ /*@+ReadModifyWrite@*/
      /*@RaceBug@*/ suppress /*@Atomic@*/ if (critical_min(&label_n[dst], new_label) > new_label) {
       /*@-Determ@*/ /*@-ReadModifyWrite@*/

        updated = true;
      }
    }
    //BlankLine

    if (updated) {
      /*@+NonDeterm@*/
      /*@RaceBug@*/ atomicWrite(goagain, 1); /*@Atomic@*/ atomicWrite(goagain, 1);
      /*@-NonDeterm@*/
      /*@+Determ@*/
      /*@RaceBug@*/ suppress /*@Atomic@*/ atomicWrite(goagain, 1);
      /*@-Determ@*/
    }
  }
}
//BlankLine

static double CPUcc_vertex(const ECLgraph g, data_type* label)
{
  /*@NonDeterm@*/ /*@Determ@*/ data_type* label_new = malloc(g.nodes * sizeof(data_type));
  struct timeval start, end;
  //BlankLine

  /*@NonDeterm@*/ init(label, g.nodes); /*@Determ@*/ init(label, label_new, g.nodes);
  //BlankLine

  // iterate until no more changes
  int* goagain = malloc(sizeof(int));
  int iter = 0;
  gettimeofday(&start, NULL);
  //BlankLine
  do {
    iter++;
    *goagain = 0;
    /*@NonDeterm@*/ cc(g, label, goagain); /*@Determ@*/ cc(g, label, label_new, goagain);
    /*@NonDeterm@*/ /*@Determ@*/ SWAP(label, label_new);
  } while (*goagain);
  //BlankLine

  gettimeofday(&end, NULL);
  double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);
  //BlankLine

  free(goagain);
  return runtime;
}
