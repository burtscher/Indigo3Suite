/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include <stdatomic.h>
/*@RaceBug1@*/ typedef data_type shared_t; /*@Atomic@*/ typedef _Atomic data_type shared_t;
typedef _Atomic int idx_t;
#include "indigo_sssp_vertex_c.h"
//BlankLine

/*@IntType@*/ const data_type maxval = INT_MAX; /*@LongType@*/ const data_type maxval = ULLONG_MAX;
//BlankLine

/*@ReadWrite@*/ declare /*@ReadModifyWrite@*/ declare

/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

/*@+Cyclic@*/
/*@NoPrecedenceBug@*/ /*@PrecedenceBug@*/ suppress
/*@-Cyclic@*/

static ECLgraph g;
static shared_t* dist;
/*@NonDeterm@*/ /*@Determ@*/ static shared_t* dist_n;
static int* wl1;
static int wl1size;
static int* wl2;
static idx_t wl2size;
static int iter;
/*@NonDup@*/ static idx_t* edit_time; /*@Dup@*/
static int threadCount;

//BlankLine
static void init(const int src, const int size)
{
  // initialize dist array
  for (int v = 0; v < size; v++) {
    const data_type temp = (v == src) ? 0 : maxval;
    /*@NonDeterm@*/ /*@Determ@*/ dist_n[v] = temp;
    dist[v] = temp;
  }
  //BlankLine
  
  // initialize worklist
  wl1[0] = src;
  wl1size = 1;
}
//BlankLine

static int sssp_vertex_data(void* arg)
{
  const long threadID = (long)arg;
  /*@NoFieldBug@*/ const int N = wl1size; /*@FieldBug@*/ const int N = g.nodes;

  /*@+Block@*/
  /*@NoPrecedenceBug@*/ const int begNode = threadID * (long)N / threadCount; /*@PrecedenceBug@*/ const int begNode = threadID * ((long)N / threadCount); 
  /*@NoPrecedenceBug@*/ const int endNode = (threadID + 1) * (long)N / threadCount; /*@PrecedenceBug@*/ const int endNode = (threadID + 1) * ((long)N / threadCount); 
  /*@-Block@*/ 
  
  /*@+Cyclic@*/
  const int top = N;
  /*@-Cyclic@*/

  /*@+NoBoundsBug@*/
  /*@Block@*/ for (int idx = begNode; idx < endNode; idx++) { /*@Cyclic@*/ for (int idx = threadID; idx < top; idx += threadCount) { 
  /*@-NoBoundsBug@*/

  /*@+BoundsBug@*/
  /*@Block@*/ for (int idx = begNode; idx <= endNode; idx++) { /*@Cyclic@*/ for (int idx = threadID; idx <= top; idx += threadCount) { 
  /*@-BoundsBug@*/
    const int src = wl1[idx];
    const data_type s = dist[src];
    /*@-NonDeterm@*/
    const int beg = g.nindex[src];
    const int end = g.nindex[src + 1];
    //BlankLine

    /*@NoRangeBug@*/ if (s != maxval) { /*@RangeBug@*/
      /*@+ReadWrite@*/
      /*@NonDeterm@*/ bool update = false; /*@Determ@*/ suppress
      /*@-ReadWrite@*/

      /*@NoNborBoundsBug@*/ for (int i = beg; i < end; i++) { /*@NborBoundsBug@*/ for (int i = beg; i <= end; i++) {
        const int dst = g.nlist[i];
        const data_type new_dist = s + g.eweight[i];
        //BlankLine

        /*@+NonDeterm@*/ /*@+ReadWrite@*/
        const data_type d = dist[dst];
        if (d > new_dist) {
          dist[dst] = new_dist;
        /*@-NonDeterm@*/ /*@-ReadWrite@*/

        /*@+NonDeterm@*/ /*@+ReadModifyWrite@*/
        /*@RaceBug1@*/ suppress /*@Atomic@*/ if (atomicMin(&dist[dst], new_dist) > new_dist) {
        /*@-NonDeterm@*/ /*@-ReadModifyWrite@*/

        /*@+Determ@*/ /*@+ReadModifyWrite@*/
        /*@RaceBug1@*/ suppress /*@Atomic@*/ if (atomicMin(&dist_n[dst], new_dist) > new_dist) {
        /*@-Determ@*/ /*@-ReadModifyWrite@*/

          /*@+NonDup@*/
          if (atomicMax(&edit_time[dst], iter) != iter) {
            wl2[wl2size++] = dst;
          }
          /*@-NonDup@*/
          /*@+Dup@*/
          wl2[wl2size++] = dst;
          /*@-Dup@*/
        /*@+NonDeterm@*/ /*@+ReadWrite@*/
        update = true;
        /*@-NonDeterm@*/ /*@-ReadWrite@*/
        }
      }
      /*@+NonDeterm@*/ /*@+ReadWrite@*/
      if (update) {
        /*@NonDup@*/ if (atomicMax(&edit_time[src], iter) != iter) { /*@Dup@*/
          wl2[wl2size++] = src;
        /*@NonDup@*/ } /*@Dup@*/
        }
      /*@-NonDeterm@*/ /*@-ReadWrite@*/
      /*@+Determ@*/
      /*@RaceBug1@*/ dist_n[src] = s; /*@Atomic@*/ atomicMin(&dist_n[src], s);
      /*@-Determ@*/
    /*@NoRangeBug@*/ } /*@RangeBug@*/
  }
}
//+BlankLine

static double CPPsssp_vertex(const int src, const ECLgraph l_g, data_type* const l_dist, const int l_threadCount)
{
  dist = (shared_t*)l_dist;
  g = l_g;
  threadCount = l_threadCount;
  /*@NonDeterm@*/ /*@Determ@*/ dist_n = (shared_t*)malloc(g.nodes * sizeof(shared_t));
  const int size = MAX(g.edges, g.nodes);
  wl1 = (int*)malloc(size * sizeof(int));
  wl2 = (int*)malloc(size * sizeof(int));
  /*@NonDup@*/ edit_time = (idx_t*)calloc(g.nodes, sizeof(idx_t)); /*@Dup@*/
  thrd_t threadHandles[threadCount];
  //BlankLine
  
  init(src, g.nodes);
  
  //BlankLine
  struct timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine

  // iterate until no more changes
  iter = 0;
  do {
    iter++;
    wl2size = 0;

    //BlankLine
    for (long i = 0; i < threadCount; ++i) {
      thrd_create(&threadHandles[i], sssp_vertex_data, (void *)i);
    }
    for (long i = 0; i < threadCount; ++i) {
      thrd_join(threadHandles[i], NULL);
    }
    //BlankLine
    
    SWAP(wl1, wl2);
    wl1size = wl2size;
    /*@NonDeterm@*/ /*@Determ@*/ SWAP(dist, dist_n);
  } while (wl1size > 0);

  //BlankLine
  gettimeofday(&end, NULL);
  const double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);

  //BlankLine
  /*@NonDeterm@*/ /*@Determ@*/ free(iter % 2 ? dist : dist_n);
  free(wl1);
  free(wl2);
  /*@NonDup@*/ free(edit_time); /*@Dup@*/
  return runtime;
}