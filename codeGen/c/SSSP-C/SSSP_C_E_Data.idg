/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include <stdatomic.h>
/*@Atomic@*/ typedef _Atomic data_type shared_t; /*@RaceBug@*/ typedef data_type shared_t;
typedef _Atomic int idx_t;
#include "indigo_sssp_edge_c.h"
//BlankLine

/*@IntType@*/ const data_type maxval = INT_MAX; /*@LongType@*/ const data_type maxval = ULLONG_MAX;
//BlankLine

/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

/*@+Cyclic@*/
/*@NoPrecedenceBug@*/ /*@PrecedenceBug@*/ suppress
/*@-Cyclic@*/

static ECLgraph g;
static const int* sp;
static shared_t* dist;
/*@NonDeterm@*/ /*@Determ@*/ static shared_t* dist_n;
static int* wl1;
static int wl1size;
static int* wl2;
static idx_t wl2size;
static int iter;
static idx_t* edit_time;
static int threadCount;

//BlankLine
static void init(const int src, const int size)
{
  // initialize dist array
  for (int v = 0; v < size; v++) {
    const data_type temp = (v == src) ? 0 : maxval;
    /*@NonDeterm@*/ /*@Determ@*/ dist_n[v] = temp;
    dist[v] = temp;
  }
  //BlankLine
  
  // initialize worklist
  int idx = 0;
  for (int i = g.nindex[src]; i < g.nindex[src + 1]; i++) {
    wl1[idx] = i;
    idx++;
  }
  wl1size = idx;
}
//BlankLine

static int sssp_edge_data(void* arg)
{
  const long threadID = (long)arg;
  /*@NoFieldBug@*/ const int N = wl1size; /*@FieldBug@*/ const int N = g.edges;

  /*@+Block@*/
  /*@NoPrecedenceBug@*/ const int begEdge = threadID * (long)N / threadCount; /*@PrecedenceBug@*/ const int begEdge = threadID * ((long)N / threadCount); 
  /*@NoPrecedenceBug@*/ const int endEdge = (threadID + 1) * (long)N / threadCount; /*@PrecedenceBug@*/ const int endEdge = (threadID + 1) * ((long)N / threadCount); 
  /*@-Block@*/
  
  /*@+Cyclic@*/
  const int top = N;
  /*@-Cyclic@*/

  /*@+NoBoundsBug@*/ 
  /*@Block@*/ for (int idx = begEdge; idx < endEdge; idx++) { /*@Cyclic@*/ for (int idx = threadID; idx < top; idx += threadCount) { 
  /*@-NoBoundsBug@*/ 
  
  /*@+BoundsBug@*/ 
  /*@Block@*/ for (int idx = begEdge; idx <= endEdge; idx++) { /*@Cyclic@*/ for (int idx = threadID; idx <= top; idx += threadCount) { 
  /*@-BoundsBug@*/ 

    const int e = wl1[idx];
    const int src = sp[e];
    const int dst = g.nlist[e];
    const data_type s = dist[src];

    /*@RangeBug@*/ /*@NoRangeBug@*/ if (s != maxval) {
      const data_type new_dist = s + g.eweight[e];

      /*@+NonDeterm@*/ /*@+ReadWrite@*/
      data_type d = dist[dst];
      if (d > new_dist) {
      dist[dst] = new_dist;
      /*@-NonDeterm@*/ /*@-ReadWrite@*/

      /*@+NonDeterm@*/ /*@+ReadModifyWrite@*/
      /*@Atomic@*/ if (atomicMin(&dist[dst], new_dist) > new_dist) { /*@RaceBug@*/ suppress
      /*@-NonDeterm@*/ /*@-ReadModifyWrite@*/

      /*@+Determ@*/ /*@+ReadModifyWrite@*/
      /*@Atomic@*/ if (atomicMin(&dist_n[dst], new_dist) > new_dist) { /*@RaceBug@*/ suppress
      /*@-Determ@*/ /*@-ReadModifyWrite@*/

      /*@+NonDeterm@*/
        /*@ReadWrite@*/ if (atomicMax(&edit_time[e], iter) != iter) { /*@ReadModifyWrite@*/
          /*@ReadWrite@*/ wl2[wl2size++] = e; /*@ReadModifyWrite@*/
        /*@ReadWrite@*/ } /*@ReadModifyWrite@*/
      /*@-NonDeterm@*/
        for (int j = g.nindex[dst]; j < g.nindex[dst + 1]; j++) {
          if (atomicMax(&edit_time[j], iter) != iter) {
            wl2[wl2size++] = j;
          }
        }
      }
    /*@RangeBug@*/ /*@NoRangeBug@*/ }

    /*@+Determ@*/
    /*@Atomic@*/ atomicMin(&dist_n[src], s); /*@RaceBug@*/ if (dist_n[src] > s) dist_n[src] = s;
    /*@-Determ@*/
  }
  return 0;
}
//BlankLine

static double CPPsssp_edge(const int src, const ECLgraph l_g, data_type* const l_dist, const int* const l_sp, const int l_threadCount)
{
  dist = (shared_t*)l_dist;
  g = l_g;
  sp = l_sp;
  threadCount = l_threadCount;
  /*@NonDeterm@*/ /*@Determ@*/ dist_n = (shared_t*)malloc(g.nodes * sizeof(shared_t));
  const int size = MAX(g.edges, g.nodes);
  wl1 = (int*)malloc(size * sizeof(int));
  wl2 = (int*)malloc(size * sizeof(int));
  edit_time = (idx_t*)calloc(g.edges, sizeof(idx_t));
  thrd_t threadHandles[threadCount];
  //BlankLine
  
  init(src, g.nodes);
  
  //BlankLine
  struct timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine

  // iterate until no more changes
  iter = 0;
  do {
    iter++;
    wl2size = 0;

    //BlankLine
    for (long i = 0; i < threadCount; ++i) {
      thrd_create(&threadHandles[i], sssp_edge_data, (void *)i);
    }
    for (long i = 0; i < threadCount; ++i) {
      thrd_join(threadHandles[i], NULL);
    }
    //BlankLine
    
    SWAP(wl1, wl2);
    wl1size = wl2size;
    /*@NonDeterm@*/ /*@Determ@*/ SWAP(dist, dist_n);
  } while (wl1size > 0);

  //BlankLine
  gettimeofday(&end, NULL);
  const double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);

  //BlankLine
  /*@NonDeterm@*/ /*@Determ@*/ free(iter % 2 ? dist : dist_n);
  free(wl1);
  free(wl2);
  free(edit_time);
  return runtime;
}
