/*@IntType@*/ typedef unsigned int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include "indigo_mis_edge_c.h"
/*@Atomic@*/ typedef _Atomic unsigned char shared_t; /*@RaceBug@*/ typedef unsigned char shared_t;
typedef _Atomic bool flag_t;
//BlankLine

/*@Atomic@*/ /*@Race@*/ 
/*@NonDeterm@*/ /*@Determ@*/

/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

/*@+Cyclic@*/
/*@NoPrecedenceBug@*/ /*@PrecedenceBug@*/ suppress
/*@-Cyclic@*/

static ECLgraph g;
static const int* sp;
static data_type* priority;
static shared_t* status;
/*@NonDeterm@*/ /*@Determ@*/ static shared_t* status_n;
static flag_t* lost;
static flag_t goagain;
static int threadCount;

//BlankLine
static void init(const int size)
{
  // initialize arrays
  for (int v = 0; v < size; v++)
  {
    /*@IntType@*/ priority[v] = hash(v + 712313887); /*@LongType@*/ priority[v] = ((unsigned long)hash(v + 712313887)) | ((unsigned long)hash(v + 683067839) << (sizeof (unsigned int) * 8));
    status[v] = undecided;
    /*@NonDeterm@*/ /*@Determ@*/ status_n[v] = undecided;
    lost[v] = false;
  }
}
//BlankLine

/*@+Determ@*/
static int updateUndecided(void* arg)
{
  const long threadID = (long)arg;
  const int begNode = threadID * (long)g.nodes / threadCount;
  const int endNode = (threadID + 1) * (long)g.nodes / threadCount;
  
  for (int i = begNode; i < endNode; ++i)
  {
    if (status[i] == undecided)
      status[i] = status_n[i];
  }
}
//+BlankLine
/*@-Determ@*/

static int mis(void* arg)
{
  const long threadID = (long)arg;
  /*@NoFieldBug@*/ const int N = g.edges; /*@FieldBug@*/ const int N = g.nodes;

  /*@+Block@*/
  /*@NoPrecedenceBug@*/ const int begEdge = threadID * (long)N / threadCount; /*@PrecedenceBug@*/ const int begEdge = threadID * ((long)N / threadCount); 
  /*@NoPrecedenceBug@*/ const int endEdge = (threadID + 1) * (long)N / threadCount; /*@PrecedenceBug@*/ const int endEdge = (threadID + 1) * ((long)N / threadCount); 
  /*@-Block@*/
  
  /*@+Cyclic@*/
  const int top = N;
  /*@-Cyclic@*/
  
  /*@+NoBoundsBug@*/
  /*@Block@*/ for (int e = begEdge; e < endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e < top; e += threadCount) { 
  /*@-NoBoundsBug@*/

  /*@+BoundsBug@*/
  /*@Block@*/ for (int e = begEdge; e <= endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e <= top; e += threadCount) { 
  /*@-BoundsBug@*/
    
    const int src = sp[e];
    const int dst = g.nlist[e];
    //BlankLine
      
    // if one is included, exclude the other
    if (status[src] == included) {
      /*@NonDeterm@*/ status[dst] = excluded; /*@Determ@*/ status_n[dst] = excluded;
    }
    else if (status[dst] == included) {
      /*@NonDeterm@*/ status[src] = excluded; /*@Determ@*/ status_n[src] = excluded;
    }
    // if neither included nor excluded -> mark lower priority node as lost
    else if (status[src] != excluded && status[dst] != excluded) {
      // mark lower priority node as lost
      if (priority[src] < priority[dst]) {
        lost[src] = true;
      } else {
        lost[dst] = true;
      }
    }
  }
}
//BlankLine

static int mis_vertex_pass(void* arg)
{
  const long threadID = (long)arg;
  /*@+Block@*/
  const int begNode = threadID * (long)g.nodes / threadCount;
  const int endEdge = (threadID + 1) * (long)g.nodes / threadCount;
  /*@-Block@*/
  /*@+Cyclic@*/
  const int top = g.nodes;
  /*@-Cyclic@*/
  
  // go over all vertexes
  /*@Block@*/ for (int v = begNode; v < endEdge; v++) { /*@Cyclic@*/ for (int v = threadID; v < top; v += threadCount) { 
    if (lost[v] == false) {
      if(status[v] == undecided) {
        /*@NonDeterm@*/ status[v] = included; /*@Determ@*/ status_n[v] = included;
      }
    }
    else {
      goagain = true;
      lost[v] = false; //reset lost flag
    }
  }
}
//BlankLine

static int mis_last_pass(void* arg)
{
  const long threadID = (long)arg;
  /*@+Block@*/
  const int begNode = threadID * (long)g.nodes / threadCount;
  const int endNode = (threadID + 1) * (long)g.nodes / threadCount;
  /*@-Block@*/
  /*@+Cyclic@*/
  const int top = g.nodes;
  /*@-Cyclic@*/
  //BlankLine
  
  /*@Block@*/ for (int v = begNode; v < endNode; v++) { /*@Cyclic@*/ for (int v = threadID; v < top; v += threadCount) { 
    if (status[v] == undecided)
    {
      status[v] = included;
    }
  }
}
//BlankLine

static double CPPmis_edge(const ECLgraph l_g, const int* const l_sp, data_type* const l_priority, unsigned char* const l_status, const int l_threadCount)
{
  g = l_g;
  sp = l_sp;
  priority = l_priority;
  status = (shared_t*)l_status;
  threadCount = l_threadCount;
  /*@NonDeterm@*/ /*@Determ@*/ status_n = (shared_t*)malloc(g.nodes * sizeof(shared_t)); 
  lost = (flag_t*)malloc(g.nodes * sizeof(flag_t));
  thrd_t threadHandles[threadCount];
  //BlankLine

  init(g.nodes);
  
  //BlankLine
  struct timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine

  int iter = 0;
  do {
    iter++;
    goagain = false;
    
    //BlankLine
    // edge pass
    for (long i = 0; i < threadCount; ++i) {
      thrd_create(&threadHandles[i], mis, (void *)i);
    }
    for (long i = 0; i < threadCount; ++i) {
      thrd_join(threadHandles[i], NULL);
    }
    //BlankLine
    
    /*@+Determ@*/
    // merge pass
    for (long i = 0; i < threadCount; ++i) {
      thrd_create(&threadHandles[i], updateUndecided, (void *)i);
    }
    for (long i = 0; i < threadCount; ++i) {
      thrd_join(threadHandles[i], NULL);
    }
    //+BlankLine
    /*@-Determ@*/
    
    // vertex pass
    for (long i = 0; i < threadCount; ++i) {
      thrd_create(&threadHandles[i], mis_vertex_pass, (void *)i);
    }
    for (long i = 0; i < threadCount; ++i) {
      thrd_join(threadHandles[i], NULL);
    }
    //BlankLine
    
    /*@+Determ@*/
    // merge pass
    for (long i = 0; i < threadCount; ++i) {
      thrd_create(&threadHandles[i], updateUndecided, (void *)i);
    }
    for (long i = 0; i < threadCount; ++i) {
      thrd_join(threadHandles[i], NULL);
    }
    //+BlankLine
    /*@-Determ@*/
    
  } while (goagain);

  //BlankLine
  for (long i = 0; i < threadCount; ++i) {
    thrd_create(&threadHandles[i], mis_last_pass, (void *)i);
  }
  for (long i = 0; i < threadCount; ++i) {
    thrd_join(threadHandles[i], NULL);
  }
  
  //BlankLine
  gettimeofday(&end, NULL);
  const double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  //BlankLine

  // determine and print set size
  int cnt = 0;
  for (int v = 0; v < g.nodes; v++) {
    if (status[v] == included) cnt++;
  }
  printf("iterations: %d,  elements in set: %d (%.1f%%)\n", iter, cnt, 100.0 * cnt / g.nodes);
  //BlankLine

  /*@NonDeterm@*/ /*@Determ@*/ free(status_n);
  free(lost);
  return runtime;
}
