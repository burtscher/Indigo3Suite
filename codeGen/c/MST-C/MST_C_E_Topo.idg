/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef long long data_type;
#include "indigo_mst_edge_c.h"
/*@Atomic@*/ typedef _Atomic int idx_t; /*@RaceBug@*/ typedef int idx_t;
/*@Atomic@*/ typedef _Atomic bool flag_t; /*@RaceBug@*/ typedef bool flag_t;
//BlankLine

/*@IntType@*/ const data_type maxval = INT_MAX; /*@LongType@*/ const data_type maxval = LLONG_MAX;
//BlankLine

/*@Atomic@*/ /*@RaceBug@*/ 
/*@NoBoundsBug@*/ /*@BoundsBug@*/ 

/*@+Cyclic@*/
/*@NoPrecedenceBug@*/ /*@PrecedenceBug@*/ suppress
/*@-Cyclic@*/

static ECLgraph g;
static const int* sp;
static data_type* eweight;
static bool* included;
static idx_t* minv;
static idx_t* parent;
static flag_t goagain;
static int threadCount;

//BlankLine
static void init()
{
  for (int v = 0; v < g.nodes; v++) {
    //initially, each vertex is its own parent
    parent[v] = v;
    minv[v] = INT_MAX;
  }
  for (int e = 0; e < g.edges; e++) {
    eweight[e] = g.eweight[e];
    included[e] = false;
  }
}
//BlankLine

static int findRep(int idx, idx_t* const parent)
{
  int curr = parent[idx];
  if (curr != idx) {
    int next, prev = idx;
    while (curr != (next = parent[curr])) {
      parent[prev] = next;
      prev = curr;
      curr = next;
    }
  }
  return curr;
}
//BlankLine

static void join(int arep, int brep, idx_t* const parent)
{
  int mrep;
  do {
    mrep = MAX(arep, brep);
    arep = MIN(arep, brep);
  /*@Atomic@*/ } while ((brep = atomicCAS(&parent[mrep], mrep, arep)) != mrep); /*@RaceBug@*/ } while ((brep = atomicCAS_cast(&parent[mrep], mrep, arep)) != mrep);
}
//BlankLine

static int mst_first(void* arg)
{
  const long threadID = (long)arg;
  /*@NoFieldBug@*/ const int N = g.edges; /*@FieldBug@*/ const int N = g.nodes;

  /*@+Block@*/
  /*@NoPrecedenceBug@*/ const int begEdge = threadID * (long long)N / threadCount; /*@PrecedenceBug@*/ const int begEdge = threadID * ((long long)N / threadCount); 
  /*@NoPrecedenceBug@*/ const int endEdge = (threadID + 1) * (long long)N / threadCount; /*@PrecedenceBug@*/ const int endEdge = (threadID + 1) * ((long long)N / threadCount); 
  /*@-Block@*/
  
  /*@+Cyclic@*/
  const int top = N;
  /*@-Cyclic@*/

  /*@+NoBoundsBug@*/ 
  /*@Block@*/ for (int e = begEdge; e < endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e < top; e += threadCount) { 
  /*@-NoBoundsBug@*/ 
  
  /*@+BoundsBug@*/ 
  /*@Block@*/ for (int e = begEdge; e <= endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e <= top; e += threadCount) { 
  /*@-BoundsBug@*/ 
    
    const int src = sp[e];
    const int dst = g.nlist[e];
    //BlankLine
    
    if (dst > src) {
      const int arep = findRep(src, parent);
      const int brep = findRep(dst, parent);
      if (arep != brep) {
        goagain = true;
        //BlankLine
        
        int edx, upd;
        upd = minv[arep];
        do {
          edx = upd;
          const data_type wei = (edx == INT_MAX) ? maxval : eweight[edx];
          if ((eweight[e] > wei) || ((eweight[e] == wei) && (e >= edx))) break;
        } while ((upd = atomicCAS(&minv[arep], edx, e)) != edx);
        //BlankLine
        
        upd = minv[brep];
        do {
          edx = upd;
          const data_type wei = (edx == INT_MAX) ? maxval : eweight[edx];
          if ((eweight[e] > wei) || ((eweight[e] == wei) && (e >= edx))) break;
        } while ((upd = atomicCAS(&minv[brep], edx, e)) != edx);
      }
    }
  }
}
//BlankLine

static int mst_second(void* arg)
{
  const long threadID = (long)arg;
  /*@NoFieldBug@*/ const int N = g.edges; /*@FieldBug@*/ const int N = g.nodes;

  /*@+Block@*/
  /*@NoPrecedenceBug@*/ const int begEdge = threadID * (long long)N / threadCount; /*@PrecedenceBug@*/ const int begEdge = threadID * ((long long)N / threadCount); 
  /*@NoPrecedenceBug@*/ const int endEdge = (threadID + 1) * (long long)N / threadCount; /*@PrecedenceBug@*/ const int endEdge = (threadID + 1) * ((long long)N / threadCount); 
  /*@-Block@*/
  
  /*@+Cyclic@*/
  const int top = N;
  /*@-Cyclic@*/

  /*@+NoBoundsBug@*/ 
  /*@Block@*/ for (int e = begEdge; e < endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e < top; e += threadCount) { 
  /*@-NoBoundsBug@*/ 
  
  /*@+BoundsBug@*/ 
  /*@Block@*/ for (int e = begEdge; e <= endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e <= top; e += threadCount) { 
  /*@-BoundsBug@*/ 

    const int src = sp[e];
    const int dst = g.nlist[e];
    //BlankLine
    
    if (dst > src) {
      const int arep = findRep(src, parent);
      const int brep = findRep(dst, parent);
      if (arep != brep) {
        if ((e == minv[arep]) || (e == minv[brep])) { 
        // if this was the best edge found for the set
          join(arep, brep, parent);
          included[e] = true;
        }
      }
    }
  }
}
//BlankLine

static double CPUmst(const ECLgraph l_g, const int* const l_sp, bool* const l_included, const int l_threadCount)
{
  g = l_g;
  sp = l_sp;
  included = l_included;
  threadCount = l_threadCount;
  parent = (idx_t*)calloc(g.nodes, sizeof(idx_t));
  minv = (idx_t*)calloc(g.nodes, sizeof(idx_t));
  eweight = (data_type*)malloc(g.edges * sizeof(data_type));
  thrd_t threadHandles[threadCount];
  //BlankLine
  
  init(g, eweight, included, parent, minv);
  
  //BlankLine
  struct timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine
  
  int iter = 0;
  do {
    iter++;
    goagain = false;
    
    //BlankLine
    for (long i = 0; i < threadCount; ++i) {
      thrd_create(&threadHandles[i], mst_first, (void *)i);
    }
    for (long i = 0; i < threadCount; ++i) {
      thrd_join(threadHandles[i], NULL);
    }
    //BlankLine
    
    if (goagain) {
      for (long i = 0; i < threadCount; ++i) {
        thrd_create(&threadHandles[i], mst_second, (void *)i);
      }
      for (long i = 0; i < threadCount; ++i) {
        thrd_join(threadHandles[i], NULL);
      }
      //BlankLine
      
      for (int v = 0; v < g.nodes; v++) {
        minv[v] = INT_MAX;
      }
    }
  } while (goagain);
  
  //BlankLine
  gettimeofday(&end, NULL);
  const double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);
  //BlankLine
  
  free(parent);
  free(minv);
  free(eweight);
  return runtime;
}
