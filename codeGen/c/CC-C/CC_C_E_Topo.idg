/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include "indigo_cc_edge_c.h"
/*@Atomic@*/ typedef _Atomic data_type shared_t; /*@RaceBug@*/ typedef data_type shared_t; 
typedef _Atomic bool flag_t;
//BlankLine

/*@ReadWrite@*/ declare /*@ReadModifyWrite@*/ declare
/*@Block@*/ declare /*@Cyclic@*/ declare

/*@+Cyclic@*/
/*@NoPrecedenceBug@*/ /*@PrecedenceBug@*/ suppress
/*@-Cyclic@*/

/*@+ReadModifyWrite@*/
/*@NoLivelockBug@*/ /*@LivelockBug@*/ suppress
/*@-ReadModifyWrite@*/

/*@NonDeterm@*/ /*@Determ@*/
/*@+Determ@*/
/*@Atomic@*/ /*@RaceBug@*/ suppress
/*@-Determ@*/

/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

static ECLgraph g;
static const int* sp;
static shared_t* label;
/*@NonDeterm@*/ /*@Determ@*/ static shared_t* label_n;
static flag_t goagain;
static int threadCount;

//BlankLine
static void init(const int size)
{
  // initialize arrays
  for (int v = 0; v < size; v++) {
    /*@NonDeterm@*/ /*@Determ@*/ label_n[v] = v;
    label[v] = v;
  }
}
//BlankLine

static int cc(void* arg)
{
  const long threadID = (long)arg;
  /*@NoFieldBug@*/ const int N = g.edges; /*@FieldBug@*/ const int N = g.nodes;

  /*@+Block@*/
  /*@NoPrecedenceBug@*/ const int begEdge = threadID * (long)N / threadCount; /*@PrecedenceBug@*/ const int begEdge = threadID * ((long)N / threadCount); 
  /*@NoPrecedenceBug@*/ const int endEdge = (threadID + 1) * (long)N / threadCount; /*@PrecedenceBug@*/ const int endEdge = (threadID + 1) * ((long)N / threadCount); 
  /*@-Block@*/

  /*@+NoBoundsBug@*/ 
  /*@Block@*/ for (int e = begEdge; e < endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e < N; e += threadCount) {
  /*@-NoBoundsBug@*/ 
  
  /*@+BoundsBug@*/ 
  /*@Block@*/ for (int e = begEdge; e <= endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e <= N; e += threadCount) {
  /*@-BoundsBug@*/ 
  
    const int src = sp[e];
    const int dst = g.nlist[e];
    const data_type new_label = label[src];

    /*@+NonDeterm@*/ /*@+ReadWrite@*/
    const data_type d = label[dst];
    /*@NoLivelockBug@*/ if (d > new_label) { /*@LivelockBug@*/ if (d >= new_label) {
      label[dst] = new_label;
    /*@-NonDeterm@*/ /*@-ReadWrite@*/

    /*@+NonDeterm@*/ /*@+ReadModifyWrite@*/
    /*@Atomic@*/ if (atomicMin(&label[dst], new_label) > new_label) { /*@RaceBug@*/ suppress 
    /*@-NonDeterm@*/ /*@-ReadModifyWrite@*/

    /*@+Determ@*/ /*@+ReadModifyWrite@*/
    /*@Atomic@*/ if (atomicMin(&label_n[dst], new_label) > new_label) { /*@RaceBug@*/ suppress 
    /*@-Determ@*/ /*@-ReadModifyWrite@*/

      goagain = 1;
    }
  }
}
//BlankLine

static double CPUcc_edge(const ECLgraph l_g, data_type* const l_label, const int* const l_sp, const int l_threadCount)
{
  g = l_g;
  label = (shared_t*)l_label;
  sp = l_sp;
  threadCount = l_threadCount;
  /*@NonDeterm@*/ /*@Determ@*/ label_n = (shared_t*)malloc(g.nodes * sizeof(shared_t));
  thrd_t threadHandles[threadCount];
  //BlankLine
  
  init(g.nodes);
  
  //BlankLine
  struct timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine
  
  // iterate until no more changes
  int iter = 0;
  do {
    iter++;
    goagain = 0;
    
    //BlankLine
    for (long i = 0; i < threadCount; ++i) {
      thrd_create(&threadHandles[i], cc, (void *)i);
    }
    for (long i = 0; i < threadCount; ++i) {
      thrd_join(threadHandles[i], NULL);
    }
    //BlankLine
    
    /*@NonDeterm@*/ /*@Determ@*/ SWAP(label, label_n);
  } while (goagain);

  //BlankLine
  gettimeofday(&end, NULL);
  const double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);
  //BlankLine

  /*@NonDeterm@*/ /*@Determ@*/ free(iter % 2 ? label : label_n);
  return runtime;
}