/*@NonDeterm@*/ declare /*@Determ@*/ declare
/*@IntType@*/ declare /*@LongType@*/ declare

/*@NonPersist@*/ declare /*@Persist@*/ declare
/*@Atomic@*/ declare /*@CudaAtomic@*/ declare /*@RaceBug@*/ declare
/*@Thread@*/ declare /*@Warp@*/ declare /*@Block@*/ declare

/*@NoNbrBoundsBug@*/ declare /*@NbrBoundsBug@*/ declare
/*@NoExcessThreadsBug@*/ declare /*@ExcessThreadsBug@*/ declare /*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

/*@+Persist@*/
/*@NoExcessThreadsBug@*/ suppress /*@ExcessThreadsBug@*/ suppress /*@NoBoundsBug@*/ /*@BoundsBug@*/ 
/*@-Persist@*/

/*@Atomic@*/ typedef int flag_t; /*@CudaAtomic@*/ typedef cuda::atomic<int> flag_t; /*@RaceBug@*/ typedef int flag_t;

/*@+IntType@*/
/*@Atomic@*/ typedef int data_type; /*@CudaAtomic@*/ typedef cuda::atomic<int> data_type; /*@RaceBug@*/ typedef int data_type;
typedef int basic_t;
/*@-IntType@*/

/*@+LongType@*/
/*@Atomic@*/ typedef unsigned long long data_type; /*@CudaAtomic@*/ typedef cuda::atomic<unsigned long long> data_type; /*@RaceBug@*/ typedef unsigned long long data_type;
typedef unsigned long long basic_t;
/*@-LongType@*/

static const int ThreadsPerBlock = 512;
/*@Thread@*/ /*@Warp@*/ static const int WarpSize = 32; /*@Block@*/
//BlankLine

#include "indigo_bfs_vertex_cuda.h"
//BlankLine

/*@NonDeterm@*/ static __global__ void init(const int src, data_type* const dist, const int size, const ECLgraph g, int* const wl1, int* const wlsize, int* const time) /*@Determ@*/ static __global__ void init(const int src, data_type* const dist, data_type* const dist_n, const int size, const ECLgraph g, int* const wl1, int* const wlsize, int* const time)
{
  // initialize dist array
  const int v = threadIdx.x + blockIdx.x * ThreadsPerBlock;
  if (v < size) {
    const data_type temp = (v == src) ? 0 : maxval;
    /*@+Determ@*/
    /*@Atomic@*/ dist_n[v] = temp; /*@CudaAtomic@*/ dist_n[v].store(temp); /*@RaceBug@*/ dist_n[v] = temp;
    /*@-Determ@*/
    /*@Atomic@*/ dist[v] = temp; /*@CudaAtomic@*/ dist[v].store(temp); /*@RaceBug@*/ dist[v] = temp;
    time[v] = 0;
  }
  // initialize worklist
  if (v == 0) {
    int idx = 0;
    for (int i = g.nindex[src]; i < g.nindex[src + 1]; i++) {
      wl1[idx] = g.nlist[i];
      idx++;
    }
    *wlsize = idx;
  }
}

/*@NonDeterm@*/ static __global__ void bfs_vertex_data(const ECLgraph g, data_type* const dist, const int* const wl1, const int wl1size, int* const wl2, int* const wl2size, const int iter, int* const time) /*@Determ@*/ static __global__ void bfs_vertex_data(const ECLgraph g, data_type* const dist, data_type* const dist_n, const int* const wl1, const int wl1size, int* const wl2, int* const wl2size, const int iter, int* const time)

{
  /*@NoFieldBug@*/ const int N = wl1size; /*@FieldBug@*/ const int N = g.nodes;
  /*@+NonPersist@*/
  /*@Thread@*/ int idx = threadIdx.x + blockIdx.x * ThreadsPerBlock; /*@Warp@*/ int idx = (threadIdx.x + blockIdx.x * ThreadsPerBlock) / WarpSize; /*@Block@*/ int idx = blockIdx.x;
  /*@NoExcessThreadsBug@*/ if (idx < N) { /*@ExcessThreadsBug@*/ /*@NoBoundsBug@*/ suppress /*@BoundsBug@*/ suppress 
  /*@-NonPersist@*/

  /*@+Persist@*/
  /*@Thread@*/ int tid = threadIdx.x + blockIdx.x * ThreadsPerBlock; /*@Warp@*/ int tid = (threadIdx.x + blockIdx.x * ThreadsPerBlock) / WarpSize; /*@Block@*/ int tid = blockIdx.x;
  /*@-Persist@*/

  /*@+Persist@*/ /*@+NoBoundsBug@*/ 
  /*@Thread@*/ for (int idx = tid; idx < N; idx += gridDim.x * ThreadsPerBlock) { /*@Warp@*/ for (int idx = tid; idx < N; idx += gridDim.x * (ThreadsPerBlock / WarpSize)) { /*@Block@*/ for (int idx = tid; idx < N; idx += gridDim.x) {
  /*@-Persist@*/ /*@-NoBoundsBug@*/

  /*@+Persist@*/ /*@+BoundsBug@*/ 
  /*@Thread@*/ for (int idx = tid; idx < N; idx += gridDim.x * ThreadsPerBlock) { /*@Warp@*/ for (int idx = tid; idx < N; idx += gridDim.x * (ThreadsPerBlock / WarpSize)) { /*@Block@*/ for (int idx = tid; idx < N; idx += gridDim.x) {
  /*@-Persist@*/ /*@-BoundsBug@*/ 

    const int v = wl1[idx];
    /*@+NonDeterm@*/
    /*@Atomic@*/ data_type d = atomicRead(&dist[v]); /*@CudaAtomic@*/ data_type d = dist[v].load(); /*@RaceBug@*/ data_type d = dist[v];
    /*@-NonDeterm@*/
    /*@+Determ@*/
    /*@Atomic@*/ data_type d = dist[v]; /*@CudaAtomic@*/ data_type d = dist[v].load(); /*@RaceBug@*/ data_type d = dist[v];
    /*@-Determ@*/
    const int beg = g.nindex[v];
    const int end = g.nindex[v + 1];
    bool updated = false;

    /*@+NoNbrBoundsBug@*/
    /*@Thread@*/ for (int i = beg; i < end; i++) { /*@Warp@*/ for (int i = beg + threadIdx.x % WarpSize; i < end; i += WarpSize) { /*@Block@*/ for (int i = beg + threadIdx.x; i < end; i += ThreadsPerBlock) {
    /*@-NoNbrBoundsBug@*/
    /*@+NbrBoundsBug@*/
    /*@Thread@*/ for (int i = beg; i <= end; i++) { /*@Warp@*/ for (int i = beg + threadIdx.x % WarpSize; i <= end; i += WarpSize) { /*@Block@*/ for (int i = beg + threadIdx.x; i <= end; i += ThreadsPerBlock) {
    /*@-NbrBoundsBug@*/
      const int src = g.nlist[i];
      /*@Atomic@*/ const data_type s = atomicRead(&dist[src]);  /*@CudaAtomic@*/ const data_type s = dist[src].load(); /*@RaceBug@*/ const data_type s = dist[src];
      /*@OverflowBug@*/ { /*@NoOverflowBug@*/ if (s != maxval) {
        const data_type new_dist = s + 1;
        /*@NoLivelockBug@*/ if (d > new_dist) { /*@LivelockBug@*/ if (d >= new_dist) {
          /*@Atomic@*/ d = new_dist; /*@CudaAtomic@*/ d = new_dist.load(); /*@RaceBug@*/ d = new_dist;
          updated = true;
        }
      }
      /*@+Determ@*/
      /*@Atomic@*/ atomicMin(&dist_n[src], s); /*@CudaAtomic@*/ dist_n[src].fetch_min(s); /*@RaceBug@*/ atomicMin(&dist_n[src], s);
      /*@-Determ@*/
    }

    if (updated) {
    /*@+NonDeterm@*/ /*@+Thread@*/
    /*@Atomic@*/ atomicWrite(&dist[v], d); /*@CudaAtomic@*/ dist[v].store(d); /*@RaceBug@*/ suppress;
    /*@-NonDeterm@*/ /*@-Thread@*/
    /*@+NonDeterm@*/ /*@+Warp@*/
    /*@Atomic@*/ atomicMin(&dist[v], d); /*@CudaAtomic@*/ dist[v].fetch_min(d, cuda::memory_order_relaxed); /*@RaceBug@*/ dist[v] = d;
    /*@-NonDeterm@*/ /*@-Warp@*/
    /*@+NonDeterm@*/ /*@+Block@*/
    /*@Atomic@*/ atomicMin(&dist[v], d); /*@CudaAtomic@*/ dist[v].fetch_min(d, cuda::memory_order_relaxed); /*@RaceBug@*/ dist[v] = d;
    /*@-NonDeterm@*/ /*@-Block@*/
    /*@+Determ@*/ /*@+Thread@*/
      /*@Atomic@*/ atomicWrite(&dist_n[v], d); /*@CudaAtomic@*/ dist_n[v].store(d); /*@RaceBug@*/ suppress;
    /*@-Determ@*/ /*@-Thread@*/
    /*@+Determ@*/ /*@+Warp@*/
    /*@Atomic@*/ atomicMin(&dist_n[v], d); /*@CudaAtomic@*/ dist_n[v].fetch_min(d, cuda::memory_order_relaxed); /*@RaceBug@*/ dist_n[v] = d;
    /*@-Determ@*/ /*@-Warp@*/
    /*@+Determ@*/ /*@+Block@*/
    /*@Atomic@*/ atomicMin(&dist_n[v], d); /*@CudaAtomic@*/ dist_n[v].fetch_min(d, cuda::memory_order_relaxed); /*@RaceBug@*/ dist_n[v] = d;
    /*@-Determ@*/ /*@-Block@*/
      for (int j = beg; j < end; j++) {
        const int n = g.nlist[j];
        if (atomicMax(&time[n], iter) != iter) {
          wl2[atomicAdd(wl2size, 1)] = n;
        }
      }
    }
  }
}

static double GPUbfs_vertex(const int src, const ECLgraph g, basic_t* const dist)
{
  data_type* d_dist;
  if (cudaSuccess != cudaMalloc((void **)&d_dist, g.nodes * sizeof(data_type))) fprintf(stderr, "ERROR: could not allocate d_dist\n");
  /*@+Determ@*/
  data_type* d_dist_new;
  if (cudaSuccess != cudaMalloc((void **)&d_dist_new, g.nodes * sizeof(data_type))) fprintf(stderr, "ERROR: could not allocate d_dist_new\n");
  /*@-Determ@*/

  int* d_wl1;
  if (cudaSuccess != cudaMalloc((void **)&d_wl1, MAX(g.edges, g.nodes) * sizeof(int))) fprintf(stderr, "ERROR: could not allocate d_wl1\n");
  int* d_wl1size;
  if (cudaSuccess != cudaMalloc((void **)&d_wl1size, sizeof(int))) fprintf(stderr, "ERROR: could not allocate d_wl1size\n");

  int* d_wl2;
  if (cudaSuccess != cudaMalloc((void **)&d_wl2, MAX(g.edges, g.nodes) * sizeof(int))) fprintf(stderr, "ERROR: could not allocate d_wl2\n");
  int* d_wl2size;
  if (cudaSuccess != cudaMalloc((void **)&d_wl2size, sizeof(int))) fprintf(stderr, "ERROR: could not allocate d_wl2size\n");

  int* d_time;
  if (cudaSuccess != cudaMalloc((void **)&d_time, sizeof(int) * g.nodes)) {fprintf(stderr, "ERROR: could not allocate memory\n"); exit(-1);}

  int wlsize;

  /*@+Persist@*/
  const int ThreadsBound = GPUinfo(0);
  const int blocks = ThreadsBound / ThreadsPerBlock;
  /*@-Persist@*/

  //BlankLine
  struct timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine

  /*@NonDeterm@*/ init<<<(g.nodes + ThreadsPerBlock - 1) / ThreadsPerBlock, ThreadsPerBlock>>>(src, d_dist, g.nodes, g, d_wl1, d_wl2size, d_time); /*@Determ@*/ init<<<(g.nodes + ThreadsPerBlock - 1) / ThreadsPerBlock, ThreadsPerBlock>>>(src, d_dist, d_dist_new, g.nodes, g, d_wl1, d_wl2size, d_time);
  //BlankLine
  if (cudaSuccess != cudaMemcpy(&wlsize, d_wl2size, sizeof(int), cudaMemcpyDeviceToHost)) fprintf(stderr, "ERROR: copying of wlsize from device failed\n");
  if (cudaSuccess != cudaMemcpy(d_wl1size, &wlsize, sizeof(int), cudaMemcpyHostToDevice)) fprintf(stderr, "ERROR: copying of wl1size to device failed\n");
  // iterate until no more changes
  int iter = 0;
  do {
    iter++;
    cudaMemset(d_wl2size, 0, sizeof(int));
    /*@+NonPersist@*/
    /*@Thread@*/ const int blocks = (wlsize + ThreadsPerBlock - 1) / ThreadsPerBlock; /*@Warp@*/ const int blocks = ((long)wlsize * WarpSize + ThreadsPerBlock - 1) / ThreadsPerBlock; /*@Block@*/ const int blocks = wlsize;
    /*@-NonPersist@*/

    //BlankLine
    /*@NonDeterm@*/ bfs_vertex_data<<<blocks, ThreadsPerBlock>>>(g, d_dist, d_wl1, wlsize, d_wl2, d_wl2size, iter, d_time); /*@Determ@*/ bfs_vertex_data<<<blocks, ThreadsPerBlock>>>(g, d_dist, d_dist_new, d_wl1, wlsize, d_wl2, d_wl2size, iter, d_time);
    //BlankLine
    if (cudaSuccess != cudaMemcpy(&wlsize, d_wl2size, sizeof(int), cudaMemcpyDeviceToHost)) fprintf(stderr, "ERROR: copying of wlsize from device failed\n");
    SWAP(d_wl1, d_wl2);
    SWAP(d_wl1size, d_wl2size);
    /*@NonDeterm@*/ /*@Determ@*/ SWAP(d_dist, d_dist_new);
  } while (wlsize > 0);
  cudaDeviceSynchronize();
  gettimeofday(&end, NULL);
  double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  CheckCuda();
  printf("iterations: %d\n", iter);

  /*@NonDeterm@*/ if (cudaSuccess != cudaMemcpy(dist, d_dist, g.nodes * sizeof(data_type), cudaMemcpyDeviceToHost)) fprintf(stderr, "ERROR: copying of dist from device failed\n"); /*@Determ@*/ if (cudaSuccess != cudaMemcpy(dist, d_dist_new, g.nodes * sizeof(data_type), cudaMemcpyDeviceToHost)) fprintf(stderr, "ERROR: copying of dist from device failed\n");

  //BlankLine
  cudaFree(d_dist);
  cudaFree(d_wl1);
  cudaFree(d_wl1size);
  cudaFree(d_wl2);
  cudaFree(d_wl2size);
  return runtime;
}
