/*@NonDeterm@*/ declare /*@Determ@*/ declare
/*@IntType@*/ declare /*@LongType@*/ declare
/*@NonPersist@*/ declare /*@Persist@*/ declare
/*@Atomic@*/ declare /*@CudaAtomic@*/ declare /*@RaceBug@*/ declare
/*@Thread@*/ declare /*@Warp@*/ declare /*@Block@*/ declare

/*@NoNbrBoundsBug@*/ declare /*@NbrBoundsBug@*/ declare
/*@NoExcessThreadsBug@*/ declare /*@ExcessThreadsBug@*/ declare /*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

/*@+Persist@*/
/*@NoExcessThreadsBug@*/ suppress /*@ExcessThreadsBug@*/ suppress /*@NoBoundsBug@*/ /*@BoundsBug@*/ 
/*@-Persist@*/

/*@Atomic@*/ typedef int flag_t; /*@CudaAtomic@*/ typedef cuda::atomic<int> flag_t; /*@RaceBug@*/ typedef int flag_t;

/*@+IntType@*/
/*@Atomic@*/ typedef int data_type; /*@CudaAtomic@*/ typedef cuda::atomic<int> data_type; /*@RaceBug@*/ typedef int data_type;
typedef int basic_t;
/*@-IntType@*/

/*@+LongType@*/
/*@Atomic@*/ typedef unsigned long long data_type; /*@CudaAtomic@*/ typedef cuda::atomic<unsigned long long> data_type; /*@RaceBug@*/ typedef unsigned long long data_type;
typedef unsigned long long basic_t;
/*@-LongType@*/

static const int ThreadsPerBlock = 512;
/*@Thread@*/ /*@Warp@*/ static const int WarpSize = 32; /*@Block@*/
//BlankLine

#include "indigo_bfs_vertex_cuda.h"
//BlankLine

static __global__ void init(const int src, data_type* const dist, const int size)
{
  // initialize arrays
  const int v = threadIdx.x + blockIdx.x * ThreadsPerBlock;
  if (v < size) {
    const data_type temp = (v == src) ? 0 : maxval;
    /*@Atomic@*/ dist[v] = temp; /*@CudaAtomic@*/ dist[v].store(temp); /*@RaceBug@*/ dist[v] = temp;
  }
}
//BlankLine

static __global__ void bfs(const int iter, const ECLgraph g, data_type* const dist, flag_t* const goagain)
{
  /*@NoFieldBug@*/ const int N = g.nodes; /*@FieldBug@*/ const int N = g.edges;
  /*@+NonPersist@*/
  /*@Thread@*/ int v = threadIdx.x + blockIdx.x * ThreadsPerBlock; /*@Warp@*/ int v = (threadIdx.x + blockIdx.x * ThreadsPerBlock) / WarpSize; /*@Block@*/ int v = blockIdx.x;
  /*@NoExcessThreadsBug@*/ if (v < N) { /*@ExcessThreadsBug@*/ { /*@NoBoundsBug@*/ suppress /*@BoundsBug@*/ suppress
  /*@-NonPersist@*/

  /*@+Persist@*/
  /*@Thread@*/ int tid = threadIdx.x + blockIdx.x * ThreadsPerBlock; /*@Warp@*/ int tid = (threadIdx.x + blockIdx.x * ThreadsPerBlock) / WarpSize; /*@Block@*/ int tid = blockIdx.x;
  /*@-Persist@*/

  /*@+Persist@*/ /*@+NoBoundsBug@*/ 
  /*@Thread@*/ for (int v = tid; v < N; v += gridDim.x * ThreadsPerBlock) { /*@Warp@*/ for (int v = tid; v < N; v += gridDim.x * (ThreadsPerBlock / WarpSize)) { /*@Block@*/ for (int v = tid; v < N; v += gridDim.x) {
  /*@-Persist@*/ /*@-NoBoundsBug@*/

  /*@+Persist@*/ /*@+BoundsBug@*/ 
  /*@Thread@*/ for (int v = tid; v < N; v += gridDim.x * ThreadsPerBlock) { /*@Warp@*/ for (int v = tid; v < N; v += gridDim.x * (ThreadsPerBlock / WarpSize)) { /*@Block@*/ for (int v = tid; v < N; v += gridDim.x) {
  /*@-Persist@*/ /*@-BoundsBug@*/ 

    //BlankLine
    const int beg = g.nindex[v];
    const int end = g.nindex[v + 1];

    /*@Atomic@*/ data_type d = atomicRead(&dist[v]); /*@CudaAtomic@*/ data_type d = dist[v].load(); /*@RaceBug@*/ data_type d = dist[v];

    //BlankLine

    /*@+NoNbrBoundsBug@*/
    /*@Thread@*/ for (int i = beg; i < end; i++) { /*@Warp@*/ for (int i = beg + threadIdx.x % WarpSize; i < end; i += WarpSize) { /*@Block@*/ for (int i = beg + threadIdx.x; i < end; i += ThreadsPerBlock) {
    /*@-NoNbrBoundsBug@*/

    /*@+NbrBoundsBug@*/
    /*@Thread@*/ for (int i = beg; i <= end; i++) { /*@Warp@*/ for (int i = beg + threadIdx.x % WarpSize; i <= end; i += WarpSize) { /*@Block@*/ for (int i = beg + threadIdx.x; i <= end; i += ThreadsPerBlock) {
    /*@-NbrBoundsBug@*/

      const int src = g.nlist[i];

      /*@Atomic@*/ const data_type s = atomicRead(&dist[src]); /*@CudaAtomic@*/ const data_type s = dist[src].load(); /*@RaceBug@*/ const data_type s = dist[src];

      /*@+NonDeterm@*/ 
      /*@OverflowBug@*/ { /*@NoOverflowBug@*/ if (s != maxval) { 
      /*@-NonDeterm@*/
      /*@+Determ@*/ 
      if (s == iter) {
      /*@-Determ@*/
        const data_type new_dist = s + 1;
        /*@NoLivelockBug@*/ if (new_dist < d) { /*@LivelockBug@*/ if (new_dist <= d) {
          /*@Atomic@*/ d = new_dist; /*@CudaAtomic@*/ d = new_dist.load(); /*@RaceBug@*/ d = new_dist;
          /*@Atomic@*/ atomicWrite(goagain, 1); /*@CudaAtomic@*/ *goagain = 1; /*@RaceBug@*/ *goagain = 1;
        }
      }
    }

    /*@+Thread@*/
    /*@Atomic@*/ atomicWrite(&dist[v], d); /*@CudaAtomic@*/ dist[v].store(d); /*@RaceBug@*/ suppress;
    /*@-Thread@*/
    /*@+Warp@*/
    /*@Atomic@*/ atomicMin(&dist[v], d); /*@CudaAtomic@*/ dist[v].fetch_min(d, cuda::memory_order_relaxed); /*@RaceBug@*/ dist[v] = d;
    /*@-Warp@*/
    /*@+Block@*/
    /*@Atomic@*/ atomicMin(&dist[v], d); /*@CudaAtomic@*/ dist[v].fetch_min(d, cuda::memory_order_relaxed); /*@RaceBug@*/ dist[v] = d;
    /*@-Block@*/
  }
}
//BlankLine

static double GPUbfs_vertex(const int src, const ECLgraph g, basic_t* const dist)
{
  /*@Atomic@*/ flag_t* d_goagain; /*@CudaAtomic@*/ flag_t* d_goagain; /*@RaceBug@*/ flag_t* d_goagain;
  data_type* d_dist;
  if (cudaSuccess != cudaMalloc((void **)&d_goagain, sizeof(flag_t))) fprintf(stderr, "ERROR: could not allocate d_goagain\n");
  if (cudaSuccess != cudaMalloc((void **)&d_dist, g.nodes * sizeof(data_type))) fprintf(stderr, "ERROR: could not allocate d_dist\n");
  //BlankLine


  /*@+NonPersist@*/
  /*@Thread@*/ const int blocks = (g.nodes + ThreadsPerBlock - 1) / ThreadsPerBlock; /*@Warp@*/ const int blocks = ((long)g.nodes * WarpSize + ThreadsPerBlock - 1) / ThreadsPerBlock; /*@Block@*/ const int blocks = g.nodes;
  /*@-NonPersist@*/
  /*@+Persist@*/
  const int ThreadsBound = GPUinfo(0);
  const int blocks = ThreadsBound / ThreadsPerBlock;
  /*@-Persist@*/

  //BlankLine
  struct timeval start, end;
  //BlankLine

  /*@+NonPersist@*/
  /*@Thread@*/ init<<<blocks, ThreadsPerBlock>>>(src, d_dist, g.nodes); /*@Warp@*/ init<<<(g.nodes + ThreadsPerBlock - 1) / ThreadsPerBlock, ThreadsPerBlock>>>(src, d_dist, g.nodes); /*@Block@*/ init<<<(g.nodes + ThreadsPerBlock - 1) / ThreadsPerBlock, ThreadsPerBlock>>>(src, d_dist, g.nodes);
  /*@-NonPersist@*/
  /*@+Persist@*/
  init<<<(g.nodes + ThreadsPerBlock - 1) / ThreadsPerBlock, ThreadsPerBlock>>>(src, d_dist, g.nodes);
  /*@-Persist@*/
  //BlankLine

  // iterate until no more changes
  int goagain;
  int iter = 0;
  gettimeofday(&start, NULL);
  //BlankLine
  do {
    goagain = 0;
    if (cudaSuccess != cudaMemcpy(d_goagain, &goagain, sizeof(flag_t), cudaMemcpyHostToDevice)) fprintf(stderr, "ERROR: copying of go_again to device failed\n");
    //BlankLine

    bfs<<<blocks, ThreadsPerBlock>>>(iter, g, d_dist, d_goagain);
    iter++;
    //BlankLine

    if (cudaSuccess != cudaMemcpy(&goagain, d_goagain, sizeof(flag_t), cudaMemcpyDeviceToHost)) fprintf(stderr, "ERROR: copying of go_again from device failed\n");
  } while (goagain);
  //BlankLine
  cudaDeviceSynchronize();
  gettimeofday(&end, NULL);
  double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);
  //BlankLine

  CheckCuda();
  if (cudaSuccess != cudaMemcpy(dist, d_dist, g.nodes * sizeof(data_type), cudaMemcpyDeviceToHost)) fprintf(stderr, "ERROR: copying of dist from device failed\n");
  //BlankLine

  cudaFree(d_goagain);
  cudaFree(d_dist);
  return runtime;
}
