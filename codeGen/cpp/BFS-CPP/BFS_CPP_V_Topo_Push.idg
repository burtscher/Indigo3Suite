/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include "indigo_bfs_vertex_cpp.h"
/*@Atomic@*/ typedef std::atomic<data_type> shared_t; /*@RaceBug@*/ typedef data_type shared_t; 
typedef std::atomic<bool> flag_t;
//BlankLine

/*@ReadWrite@*/ /*@ReadModifyWrite@*/
/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare
/*@NoLivelockBug@*/ declare /*@LivelockBug@*/ declare
/*@OverflowBug@*/ declare /*@NoOverflowBug@*/ declare
/*@NonDeterm@*/ declare /*@Determ@*/ declare

/*@+ReadModifyWrite@*/
/*@NoLivelockBug@*/ /*@LivelockBug@*/ suppress
/*@-ReadModifyWrite@*/

/*@+Cyclic@*/
/*@NoPrecedenceBug@*/ /*@PrecedenceBug@*/ suppress
/*@-Cyclic@*/


static void init(const int src, shared_t* const dist, const int size)
{
  // initialize arrays
  for (int v = 0; v < size; v++) {
    dist[v] = (v == src) ? 0 : maxval;
  }
}

static void bfs(const ECLgraph g, shared_t* const dist, flag_t& goagain, const int iter, const int threadID, const int threadCount)
{
  /*@FieldBug@*/ const int N = g.edges; /*@NoFieldBug@*/ const int N = g.nodes;

  /*@+Block@*/
  /*@NoPrecedenceBug@*/ const int begNode = threadID * (long)N / threadCount; /*@PrecedenceBug@*/ const int begNode = threadID * N / threadCount;
  /*@NoPrecedenceBug@*/ const int endNode = (threadID + 1) * (long)N / threadCount; /*@PrecedenceBug@*/ const int endNode = (threadID + 1) * N / threadCount;
  /*@-Block@*/
  
  /*@+Cyclic@*/
  const int top = N;
  /*@-Cyclic@*/
  
  /*@+NoBoundsBug@*/
  /*@Block@*/ for (int v = begNode; v < endNode; v++) { /*@Cyclic@*/ for (int v = threadID; v < top; v += threadCount) { 
  /*@-NoBoundsBug@*/

  /*@+BoundsBug@*/
  /*@Block@*/ for (int v = begNode; v <= endNode; v++) { /*@Cyclic@*/ for (int v = threadID; v <= top; v += threadCount) { 
  /*@-BoundsBug@*/

    //BlankLine
    
    const int beg = g.nindex[v];
    const int end = g.nindex[v + 1];
    const data_type s = dist[v];
    //BlankLine

      /*@+NonDeterm@*/ 
      /*@OverflowBug@*/ /*@NoOverflowBug@*/ if (s != maxval) { 
      /*@-NonDeterm@*/

      /*@+Determ@*/ 
      /*@OverflowBug@*/ /*@NoOverflowBug@*/ if (s == iter) {
      /*@-Determ@*/
      bool updated = false;
      
      /*@NbrBoundsBug@*/ for (int i = beg; i <= end; i++) { /*@NoNbrBoundsBug@*/ for (int i = beg; i < end; i++) {
        
        const int dst = g.nlist[i];
        const data_type new_dist = s + 1;

        /*@+ReadWrite@*/
        const data_type d = dist[dst];
        /*@NoLivelockBug@*/ if (d > new_dist) { /*@LivelockBug@*/ 
        dist[dst] = new_dist;
        /*@-ReadWrite@*/

        /*@+ReadModifyWrite@*/
        /*@Atomic@*/ if (atomicMin(&dist[dst], new_dist) > new_dist) { /*@RaceBug@*/ suppress
        /*@-ReadModifyWrite@*/

        updated = true;
        /*@NoLivelockBug@*/ } /*@LivelockBug@*/ 
      }
      if (updated) {
        goagain = 1;
      }
    /*@OverflowBug@*/ /*@NoOverflowBug@*/ } 
  }
}
//BlankLine

static double CPPbfs_vertex(const int src, const ECLgraph& g, data_type* const distance, const int threadCount)
{
  shared_t* dist = (shared_t*)distance;
  std::thread threadHandles[threadCount];
  //BlankLine
  
  init(src, dist, g.nodes);
  
  //BlankLine
  timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine
  
  // iterate until no more changes
  flag_t goagain;
  int iter = 0;
  do {
    goagain = 0;
    //BlankLine
    
    for (int i = 0; i < threadCount; ++i) {
      threadHandles[i] = std::thread(bfs, g, dist, std::ref(goagain), iter, i, threadCount);
    }
    for (int i = 0; i < threadCount; ++i) {
      threadHandles[i].join();
    }
    //BlankLine
    iter++;
  } while (goagain);
  //BlankLine
  
  gettimeofday(&end, NULL);
  double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);
  //BlankLine

  return runtime;
}
