/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include "indigo_sssp_edge_cpp.h"
/*@Race1@*/ typedef data_type shared_t; /*@Race2@*/ typedef std::atomic<data_type> shared_t; /*@Atomic@*/ typedef std::atomic<data_type> shared_t;
/*@Race1@*/ typedef std::atomic<bool> flag_t; /*@Race2@*/ typedef bool flag_t; /*@Atomic@*/ typedef std::atomic<bool> flag_t; 
//BlankLine

/*@ReadWrite@*/ declare /*@ReadModifyWrite@*/ declare
/*@Block@*/ declare /*@Cyclic@*/ declare

/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

/*@+Cyclic@*/
/*@NoPrecedenceBug@*/ /*@PrecedenceBug@*/ suppress
/*@-Cyclic@*/

/*@NonDeterm@*/ static void init(const int src, shared_t* const dist, const int size) /*@Determ@*/ static void init(const int src, shared_t* const dist, shared_t* const dist_n, const int size)
{
  // initialize arrays
  for (int v = 0; v < size; v++) {
    const data_type temp = (v == src) ? 0 : maxval;
    /*@NonDeterm@*/ /*@Determ@*/ dist_n[v] = temp;
    dist[v] = temp;
  }
}
//BlankLine

/*@NonDeterm@*/ static void sssp(const ECLgraph g, const int* const sp, shared_t* const dist, flag_t &goagain, const int threadID, const int threadCount) /*@Determ@*/ static void sssp(const ECLgraph g, const int* const sp, shared_t* const dist, shared_t* const dist_n, flag_t &goagain, const int threadID, const int threadCount)
{
  /*@NoFieldBug@*/ const int N = g.edges; /*@FieldBug@*/ const int N = g.nodes;

  /*@+Block@*/
  /*@NoPrecedenceBug@*/ const int begEdge = threadID * (long)N / threadCount; /*@PrecedenceBug@*/ const int begEdge = threadID * ((long)N / threadCount); 
  /*@NoPrecedenceBug@*/ const int endEdge = (threadID + 1) * (long)N / threadCount; /*@PrecedenceBug@*/ const int endEdge = (threadID + 1) * ((long)N / threadCount); 
  /*@-Block@*/
  
  /*@+Cyclic@*/
  const int top = N;
  /*@-Cyclic@*/

  /*@+NoBoundsBug@*/ 
  /*@Block@*/ for (int e = begEdge; e < endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e < top; e += threadCount) { 
  /*@-NoBoundsBug@*/ 
  
  /*@+BoundsBug@*/ 
  /*@Block@*/ for (int e = begEdge; e <= endEdge; e++) { /*@Cyclic@*/ for (int e = threadID; e <= top; e += threadCount) { 
  /*@-BoundsBug@*/ 
    
    const int src = sp[e];
    const int dst = g.nlist[e];
    const data_type s = dist[src];
    //BlankLine

    /*@NoRangeBug@*/ if (s != maxval) { /*@RangeBug@*/
      const data_type new_dist = s + g.eweight[e];

      /*@+NonDeterm@*/ /*@+ReadWrite@*/
      const data_type d = dist[dst];
      if (d > new_dist) {
        dist[dst] = new_dist;
      /*@-NonDeterm@*/ /*@-ReadWrite@*/

      /*@+NonDeterm@*/ /*@+ReadModifyWrite@*/
      /*@Race1@*/ suppress /*@Race2@*/ if (atomicMin(&dist[dst], new_dist) > new_dist) { /*@Atomic@*/ if (atomicMin(&dist[dst], new_dist) > new_dist) {
      /*@-NonDeterm@*/ /*@-ReadModifyWrite@*/

      /*@+Determ@*/ /*@+ReadModifyWrite@*/
      /*@Race1@*/ suppress /*@Race2@*/ if (atomicMin(&dist_n[dst], new_dist) > new_dist) { /*@Atomic@*/ if (atomicMin(&dist_n[dst], new_dist) > new_dist) {
      /*@-Determ@*/ /*@-ReadModifyWrite@*/

      /*@+NonDeterm@*/
      goagain = 1;
      /*@-NonDeterm@*/
      /*@+Determ@*/
      /*@Race1@*/ suppress /*@Race2@*/ goagain = 1; /*@Atomic@*/ goagain = 1;
      /*@-Determ@*/
      }
    /*@NoRangeBug@*/ } /*@RangeBug@*/
  }
}
//BlankLine

static double CPUsssp_edge(const int src, const ECLgraph& g, data_type* const distance, const int* const sp, const int threadCount)
{
  shared_t* dist = (shared_t*)distance;
  /*@NonDeterm@*/ /*@Determ@*/ shared_t* dist_new = new shared_t [g.nodes];
  std::thread threadHandles[threadCount];
  //BlankLine
  
  /*@NonDeterm@*/ init(src, dist, g.nodes); /*@Determ@*/ init(src, dist, dist_new, g.nodes);
  
  //BlankLine
  timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine
  
  // iterate until no more changes
  flag_t goagain;
  int iter = 0;
  do {
    iter++;
    goagain = 0;
    
    //BlankLine
    for (int i = 0; i < threadCount; ++i) {
      /*@NonDeterm@*/ threadHandles[i] = std::thread(sssp, g, sp, dist, std::ref(goagain), i, threadCount); /*@Determ@*/ threadHandles[i] = std::thread(sssp, g, sp, dist, dist_new, std::ref(goagain), i, threadCount);
    }
    for (int i = 0; i < threadCount; ++i) {
      threadHandles[i].join();
    }
    //BlankLine
    
    /*@NonDeterm@*/ /*@Determ@*/ std::swap(dist, dist_new);
  } while (goagain);
  //BlankLine

  gettimeofday(&end, NULL);
  double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);
  //BlankLine

  /*@NonDeterm@*/ /*@Determ@*/ delete [] (iter % 2 ? dist : dist_new);
  return runtime;
}
