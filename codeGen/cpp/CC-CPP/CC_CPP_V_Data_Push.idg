/*@IntType@*/ typedef int data_type; /*@LongType@*/ typedef unsigned long long data_type;
#include "indigo_cc_vertex_cpp.h"
/*@Atomic@*/ typedef std::atomic<data_type> shared_t; /*@RaceBug@*/ typedef data_type shared_t;
typedef std::atomic<int> idx_t;
//BlankLine

/*@ReadWrite@*/ declare /*@ReadModifyWrite@*/ declare

/*@NoBoundsBug@*/ declare /*@BoundsBug@*/ declare

/*@+Cyclic@*/
/*@NoPrecedenceBug@*/ /*@PrecedenceBug@*/ suppress
/*@-Cyclic@*/

/*@+ReadModifyWrite@*/
/*@NoLivelockBug@*/ /*@LivelockBug@*/ suppress
/*@-ReadModifyWrite@*/

/*@NonDeterm@*/ static void init(shared_t* const label, const int size, int* const wl1, idx_t& wlsize) /*@Determ@*/ static void init(shared_t* const label, shared_t* const label_n, const int size, int* const wl1, idx_t& wlsize)
{
  // initialize label array
  for (int v = 0; v < size; v++) {
    /*@+Determ@*/
    label_n[v] = v;
    /*@-Determ@*/
    label[v] = v;

    // initialize worklist
    wl1[v] = v;
  }
  wlsize = size;
}
//BlankLine

/*@+NonDup@*/
/*@NonDeterm@*/ static void cc_vertex_data(const ECLgraph g, shared_t* const label, const int* const wl1, const int wl1size, int* const wl2, idx_t& wl2size, const int iter, idx_t* const time, const int threadID, const int threadCount) /*@Determ@*/ static void cc_vertex_data(const ECLgraph g, shared_t* const label, shared_t* const label_n, const int* const wl1, const int wl1size, int* const wl2, idx_t& wl2size, const int iter, idx_t* const time, const int threadID, const int threadCount)
/*@-NonDup@*/
/*@+Dup@*/
/*@NonDeterm@*/ static void cc_vertex_data(const ECLgraph g, shared_t* const label, const int* const wl1, const int wl1size, int* const wl2, idx_t& wl2size, const int iter, const int threadID, const int threadCount) /*@Determ@*/ static void cc_vertex_data(const ECLgraph g, shared_t* const label, shared_t* const label_n, const int* const wl1, const int wl1size, int* const wl2, idx_t& wl2size, const int iter, const int threadID, const int threadCount)
/*@-Dup@*/
{
  /*@NoFieldBug@*/ const int N = wl1size; /*@FieldBug@*/ const int N = g.nodes;

  /*@+Block@*/
  /*@NoPrecedenceBug@*/ const int begNode = threadID * (long)N / threadCount; /*@PrecedenceBug@*/ const int begNode = threadID * ((long)N / threadCount); 
  /*@NoPrecedenceBug@*/ const int endNode = (threadID + 1) * (long)N / threadCount; /*@PrecedenceBug@*/ const int endNode = (threadID + 1) * ((long)N / threadCount); 
  /*@-Block@*/
  
  /*@+Cyclic@*/
  const int top = N;
  /*@-Cyclic@*/
  
  /*@+NoBoundsBug@*/ 
  /*@Block@*/ for (int idx = begNode; idx < endNode; idx++) { /*@Cyclic@*/ for (int idx = threadID; idx < top; idx += threadCount) { 
  /*@-NoBoundsBug@*/ 
  
  /*@+BoundsBug@*/ 
  /*@Block@*/ for (int idx = begNode; idx <= endNode; idx++) { /*@Cyclic@*/ for (int idx = threadID; idx <= top; idx += threadCount) { 
  /*@-BoundsBug@*/ 

    const int src = wl1[idx];
    const data_type new_label = label[src];
    const int beg = g.nindex[src];
    const int end = g.nindex[src + 1];

    /*@+ReadWrite@*/
    /*@NonDeterm@*/ bool update = false; /*@Determ@*/ suppress
    /*@-ReadWrite@*/

    /*@NoNbrBoundsBug@*/ for (int i = beg; i < end; i++) { /*@NbrBoundsBug@*/ for (int i = beg; i <= end; i++) {
      const int dst = g.nlist[i];
      //BlankLine

      /*@+NonDeterm@*/ /*@+ReadWrite@*/
      const data_type d = label[dst];
      /*@NoLivelockBug@*/ if (d > new_label) { /*@LivelockBug@*/ if (d >= new_label) {
        label[dst] = new_label;
      /*@-NonDeterm@*/ /*@-ReadWrite@*/

      /*@+NonDeterm@*/ /*@+ReadModifyWrite@*/
      /*@Atomic@*/ if (atomicMin(&label[dst], new_label) > new_label) { /*@RaceBug@*/ suppress 
      /*@-NonDeterm@*/ /*@-ReadModifyWrite@*/

      /*@+Determ@*/ /*@+ReadModifyWrite@*/
      /*@Atomic@*/ if (atomicMin(&label_n[dst], new_label) > new_label) { /*@RaceBug@*/ suppress 
      /*@-Determ@*/ /*@-ReadModifyWrite@*/

        /*@+NonDup@*/
        if (atomicMax(&time[dst], iter) != iter) {
          wl2[wl2size++] = dst;
        }
        /*@-NonDup@*/
        /*@+Dup@*/
        wl2[wl2size++] = dst;
        /*@-Dup@*/
        /*@+NonDeterm@*/ /*@+ReadWrite@*/
        update = true;
        /*@-NonDeterm@*/ /*@-ReadWrite@*/
      }
    }
    /*@+NonDeterm@*/ /*@+ReadWrite@*/
    /*@NonDup@*/ if (update) { /*@Dup@*/ suppress
      /*@NonDup@*/ if (atomicMax(&time[src], iter) != iter) { /*@Dup@*/
        /*@NonDup@*/ wl2[wl2size++] = src; /*@Dup@*/ 
      /*@NonDup@*/ } /*@Dup@*/
      /*@NonDup@*/ } /*@Dup@*/ }
    /*@-NonDeterm@*/ /*@-ReadWrite@*/
    /*@+Determ@*/
    atomicMin(&label_n[src], new_label);
    /*@-Determ@*/
  }
}
//BlankLine

static double CPUcc_vertex(const ECLgraph g, data_type* const label_orig, const int threadCount)
{
  shared_t* label = (shared_t*)label_orig;
  /*@NonDeterm@*/ /*@Determ@*/ shared_t* label_new = new shared_t [g.nodes];
  const int size = std::max(g.edges, g.nodes);
  int* wl1 = new int [size];
  int* wl2 = new int [size];
  /*@NonDup@*/ idx_t* time = new idx_t [g.nodes]; /*@Dup@*/
  idx_t wl1size;
  idx_t wl2size;
  std::thread threadHandles[threadCount];
  //BlankLine

  /*@NonDeterm@*/ init(label, g.nodes, wl1, wl1size); /*@Determ@*/ init(label, label_new, g.nodes, wl1, wl1size);
  /*@NonDup@*/ std::fill((int*)time, (int*)time + g.nodes, 0); /*@Dup@*/
  
  //BlankLine
  timeval start, end;
  gettimeofday(&start, NULL);
  //BlankLine

  // iterate until no more changes
  int iter = 0;
  do {
    iter++;
    wl2size = 0;

    //BlankLine
    for (int i = 0; i < threadCount; ++i) {
      /*@+NonDup@*/
      /*@NonDeterm@*/ threadHandles[i] = std::thread(cc_vertex_data, g, label, wl1, wl1size.load(), wl2, std::ref(wl2size), iter, time, i, threadCount); /*@Determ@*/ threadHandles[i] = std::thread(cc_vertex_data, g, label, label_new, wl1, wl1size.load(), wl2, std::ref(wl2size), iter, time, i, threadCount);
      /*@-NonDup@*/
      /*@+Dup@*/
      /*@NonDeterm@*/ threadHandles[i] = std::thread(cc_vertex_data, g, label, wl1, wl1size.load(), wl2, std::ref(wl2size), iter, i, threadCount); /*@Determ@*/ threadHandles[i] = std::thread(cc_vertex_data, g, label, label_new, wl1, wl1size.load(), wl2, std::ref(wl2size), iter, i, threadCount);
      /*@-Dup@*/
    }
    for (int i = 0; i < threadCount; ++i) {
      threadHandles[i].join();
    }
    //BlankLine
    
    std::swap(wl1, wl2);
    wl1size = wl2size.load();
    /*@NonDeterm@*/ /*@Determ@*/ std::swap(label, label_new);
  } while (wl1size > 0);

  //BlankLine
  gettimeofday(&end, NULL);
  double runtime = end.tv_sec + end.tv_usec / 1000000.0 - start.tv_sec - start.tv_usec / 1000000.0;
  printf("iterations: %d\n", iter);

  //BlankLine
  /*@NonDeterm@*/ /*@Determ@*/ delete [] (iter % 2 ? label : label_new);
  delete [] wl1;
  delete [] wl2;
  /*@NonDup@*/ delete [] time; /*@Dup@*/
  return runtime;
}